/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EMD;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

/**
 *
 * @author uqdhe
 */
public class FastEMD {

    /**
     * @param args the command line arguments
     */
    public static final int NUM = 3411;
    public static final double[][] distancematrix = new double[NUM][NUM];
    public static void main(String[] args) throws FileNotFoundException, IOException {
        
        // TODO code application logic here
        long startTime = 0;
        long endTime = 0;
        long totalTime = 0;
        //read the road point file, and store the coordinate in an array with the road id being the index
        String InFile = "C:\\Users\\uqdhe\\Desktop\\trajecortydata\\unknow match data\\experimenttest\\roadsegmentmidpoint";
        ArrayList<Point> roadlist = new ArrayList<Point>();

        FileInputStream inputStream = null;
        Scanner sc = null;
        String line = "";
        String SplitBy = ",";
        inputStream = new FileInputStream(InFile);
        sc = new Scanner(inputStream, "UTF-8");
        int tranum = 0;
        int check = 0;
        while (sc.hasNextLine()) {

//            if(check > 10)
//                break;
//            check++;
//            tranum++;

            line = sc.nextLine();
            String[] rowdata = line.split(SplitBy);
            Point p = new Point();
            p.longitude = Double.parseDouble(rowdata[5])/10000;
            p.latitude = Double.parseDouble(rowdata[6])/10000;
            roadlist.add(p);            
        }
//******************************************************************
//        String InFile = "C:\\Users\\uqdhe\\Desktop\\trajecortydata\\unknow match data\\experimenttest\\distancematrix-new";
//
//        FileInputStream inputStream = null;
//        Scanner sc = null;
//        String line = "";
//        String SplitBy = ",";
//        inputStream = new FileInputStream(InFile);
//        sc = new Scanner(inputStream, "UTF-8");
//        int tranum = 0;
//        int check = 0;
//        while (sc.hasNextLine()) {
//
//            line = sc.nextLine();
//            String[] rowdata = line.split(SplitBy);
//            for(int i = 0; i < NUM; i++){
//                distancematrix[check][i] = Double.parseDouble(rowdata[i + 1]);
//            }
//            check++;
//        }
//        
//        String InFilep = "C:\\Users\\uqdhe\\Desktop\\trajecortydata\\unknow match data\\experimenttest\\od-trajectory\\pointunion-new";
//        
//        HashMap<Integer, Integer> pointMap = new HashMap<Integer, Integer>();
//        FileInputStream inputStreamp = null;
//        Scanner scp = null;
//        String linep = "";
//        String SplitByp = ",";
//        inputStreamp = new FileInputStream(InFilep);
//        scp = new Scanner(inputStreamp, "UTF-8");
//        int index = 0;
//        while (scp.hasNextLine()) {
//
//            linep = scp.nextLine();
//            //String[] rowdata = line2.split(SplitBy2);
//            pointMap.put(Integer.parseInt(linep), index);
//            index++;
//
//        }
        //System.out.println("the number of pointunion = " + index);
//*******************************************************************
        
        String fileDir = "C:\\Users\\uqdhe\\Desktop\\trajecortydata\\"
                + "unknow match data\\experimenttest\\od-trajectory\\order\\";
        
        String outDir = "C:\\Users\\uqdhe\\Desktop\\trajecortydata\\"
                + "unknow match data\\experimenttest\\result\\";
        FileWriter file1 = new FileWriter(outDir+"result-value-emd-order-week");
        BufferedWriter outputWriter1 = new BufferedWriter(file1);
        
        FileWriter file2 = new FileWriter(outDir+"result-time-emd-order-week");
        BufferedWriter outputWriter2 = new BufferedWriter(file2);
        
        for(int index1 = 1 ; index1 < 9; index1++){
            
            FileInputStream inputStream1 = new FileInputStream(fileDir  + index1 + "-3");
            Scanner sc1 = new Scanner(inputStream1, "UTF-8");
            
            int check1 = 0;
            String line1 = new String();
            String line2 = new String();
            while (sc1.hasNextLine()) {
                    // read each line
                    String lineA = sc1.nextLine();
                 
                    if (check1 == 0 ){
                        line1 = lineA;
                        //check1++;
                        //continue;
                    }
                   
                    
                    if (check1 == 4){
                        line2 = lineA;
                        break;
                    }
                    check1++;
            }
            
            String[] data = line1.split(" ");
            String[] order = line2.split(" ");
            int N = data.length/2;
            int [][] H = new int [N][2];
            double [] HO = new double [N]; 
            System.out.println("N = " + N);
            for(int row = 0; row < N; row++){
                H[row][0] = Integer.parseInt(data[row * 2]);
                H[row][1] = Integer.parseInt(data[row * 2 + 1]);
                HO[row] = Double.parseDouble(order[row * 2 + 1]);
                //System.out.println(data[row * 2]);
//                H[row][0] = pointMap.get(Integer.parseInt(data[row * 2]));
//                H[row][1] = Integer.parseInt(data[row * 2 + 1]);
            }
            
//            String[] data1 = line1.split(",");
//            String[] order1 = line2.split(",");
//                print("lenth = " + data1.length);
//                
//                int M = data1.length/2;
//                print("M = " + M);
//                int [][] K = new int [M][2];
//                double [] KO = new double [M];
//                for(int row = 0; row < M; row++){
//                    K[row][0] = Integer.parseInt(data1[row * 2]);
//                    K[row][1] = Integer.parseInt(data1[row * 2 + 1]);
//                    KO[row] = Double.parseDouble(order[row * 2 + 1]);
////                    K[row][0] = pointMap.get(Integer.parseInt(data1[row * 2]));
////                    K[row][1] = Integer.parseInt(data1[row * 2 + 1]);
//                }
            
//            for(int index2 = 1; index2 < 4; index2++){
//                
                FileInputStream inputStream2 = new FileInputStream(fileDir + index1 + "-4");
                Scanner sc2 = new Scanner(inputStream2, "UTF-8");
            
                int check2 = 0;
                String line12 = new String();
                String line22 = new String();
                while (sc2.hasNextLine()) {
                    // read each line
                    String lineB = sc2.nextLine();
                    
                    if (check2 == 0 ){
                        line12 = lineB;
//                        check2++;
//                        break;
                    }
                    
                    if (check2 == 4){
                        line22 = lineB;
                        break;
                    }
                    check2++;
                }
            
                String[] data1 = line12.split(" ");
                String[] order1 = line22.split(" ");
                //print("lenth = " + data1.length);
              
                int M = data1.length/2;
                System.out.println("M = " + M);
                int [][] K = new int [M][2];
                double [] KO = new double [M];
                for(int row = 0; row < M; row++){
                    K[row][0] = Integer.parseInt(data1[row * 2]);
                    K[row][1] = Integer.parseInt(data1[row * 2 + 1]);
                    KO[row] = Double.parseDouble(order1[row * 2 + 1]);
//                    K[row][0] = pointMap.get(Integer.parseInt(data1[row * 2]));
//                    K[row][1] = Integer.parseInt(data1[row * 2 + 1]);
                }
        //*************************************************************
        //build the signatures
        boolean tag = true;
        double [] a = {1, 0.95, 0.5, 0.05, 0};
        for(int j = 0; j < 5; j++){
            double weight = a[j];
        
//        int N = 0;
//        int M = 0;
        
//        int[] roadP = {266589,264997,263578,266379,266351,274777,263579,266562,266590};
//        //int[] roadQ = {266589,326029,264997,263578,266379,263579,326030,266351,274777,266562,326025,326028,326027};
//        int[] roadQ = {266589,326029,264997,263578,266379,263579,326030,266351,274777,266562,326025,326028,326027,
//                        263578, 264996, 269511,271228,271230,271225,271227,273310};
//        //int[] roadQ = {300038,226269,227483,226270,300045,189200,370413,300044,370414};
//        //int[] roadQ = {266589,264997,263578,266379,266351,274777,263579,266562,266590};
//        
//        double[] weightSignP = {2,21,21,21,21,21,21,21,2};
//        //double[] weightSignQ = {6,1,807,807,807,807,2,807,807,807,2,1,1};
//        //double[] weightSignQ = {2,21,21,21,21,21,21,21,2};
//        double[] weightSignQ = {6,1,807,807,807,807,2,807,807,807,2,1,1
//                            ,1,1,1,1,1,1,1,1};
//        //double[] weightSignQ = {20,20,20,2,20,20,20,20,20};
//        
//        // initialize the order
//        //double[] orderP = {5,0,25,109,88,130,46,67,5};
//        //double[] orderQ = {82,20,142,5,42,0,122,62,102};
//        //double[] orderQ = {17,151,126,42,63,21,105,84,17};
////        double[] orderP = {17,151,126,42,63,21,105,84,17};
////        double[] orderQ = {16,3,0,820,4048,1627,8,3241,4855,2434,5,4,5
////                            ,6,7,8,9,10,11,12,13};
//        
//        double[] orderP = {0.421,0.0,2.475,5.628,5.026,6.033,3.044,3.538,0.394};
//        double[] orderQ = {2.322,0.2,0.0,61.063,135.407,70.498,0.749,115.957,148.261,79.548,0.098,0.211,0.56
//                ,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4}; 
//        //double[] orderQ = {0.824,0.541,1.043,0.056,0.618,0.0,0.883,0.733,0.859}; 

//        int[][] H = {
//{104780,1},{99011,1},{116804,217},{114750,1},{100056,1},{76700,3},{76426,1},{112174,2158},{104779,1},{92212,1},{99009,1},{100075,1},{100076,1},{73434,1},{100077,11},{295004,2158},{75299,1},{99006,1},{318612,1},{99003,1},{318611,1},{100108,1},{318609,1},{113097,1},{100107,1},{73443,1},{73442,2159},{113996,217},{113997,217},{78740,1},{97370,1},{73979,124},{73978,124},{97369,1},{98972,10},{98971,10},{98970,10},{110756,1},{98925,1941},{75528,17},{75527,2053},{95935,1},{95930,1},{95931,1},{73187,1},{110747,1},{78760,123},{117543,11},{77554,1},{119041,1},{119042,1},{375149,112},{375148,112},{298834,95},{298833,95},{318654,1},{73475,2158},{318653,1},{125430,1},{76174,1},{76696,1},{78753,217},{78755,10},{78758,123},{78759,1},{100081,10},{100082,10},{103474,1},{103473,1},{103476,2159},{79070,1},{103475,2159},{296423,1941},{318621,1},{95672,10},{98941,1},{296422,1941},{98940,1},{81034,11},{81035,112},{100078,11},{100111,1},{102776,1},{102775,1},{103480,2036},{103485,2036},{103484,2036},{96875,1},{298857,1},{298856,1},{296434,207},{73496,1},{296433,207},{98896,1},{79067,1},{79066,1},{78494,1},{81027,1941},{78497,207},{79069,1},{81028,2053},{318627,1},{108091,1},{318626,1},{117235,207},{117234,95},{117236,112},{309921,1},{103479,1},{309922,1},{95936,1},
//};
//        int[][] K = {
//{134754,2422},{157278,2441},{155413,2489},{139009,48},{158769,1},{139007,82},{155414,2523},{139008,82},{137908,101},{157638,1},{128390,35},{135848,2523},{137907,67},{383532,102},{383533,102},{135132,35},{158770,1},{135855,2489},{155760,1},{133756,2422},{155960,1},{134841,1},{154634,1},{291687,1},{291361,2523},{291362,2523},{371468,35},{371467,35},{141140,1},{127568,83},{127567,83},{141139,1},{134571,102},{138610,2},{134572,1},{134573,1},{157277,2441},{159059,2},{157654,2422},{129462,82},{328902,3},{157655,2441},{157611,35},{137925,1},{137526,2},{328903,3},{328900,102},{157653,2422},{328901,99},{137923,1},{134574,1},{157615,35},{134575,1},{132875,1},{138611,2},{137525,2},{153612,2523},{155757,1},{157619,2},{157616,35},{328908,1},{328909,1},{155715,1},{155959,1},{155717,1},{129460,1},{129459,83},{137971,82},{158110,2},{157643,102},{157642,102},{153761,35},{130384,1},{131313,1},{131312,1},{157921,2489},{129458,83},{157608,2},{295189,1},{157609,2},{141593,1},{141595,1},{141594,1},{295190,1},{142168,1},{137541,1},{134110,82},{154183,1},{154184,1},{139044,1},
//};        
        
//        int[][] HO = {{211085,87},{211084,87},{214114,28},{316146,45},{204547,43},{316147,46},{183881,21},{204303,45},{204795,19},{216768,30},{381910,216},{216767,49},{214123,32},{218601,54},{156497,21},{214122,31},{156499,22},{160515,46},{214124,33},{381909,144},{180269,38},{296458,146},{296456,140},{296457,148},{296455,142},{204798,32},{172977,38},{172978,37},{172971,106},{180474,62},{218611,26},{180476,60},{218610,25},{181326,194},{180478,31},{181328,206},{375254,4035},{316360,64694},{296588,31},{296587,32},{205779,598},{316118,92},{218607,4575},{218606,4411},{218604,28},{179036,33},{218603,27},{179034,34},{215478,41},{375246,52},{183879,22},{375245,50},{135114,57},{180480,24},{180482,23},{126933,17},{204581,29},{375253,6022},{204580,27},{155071,44},{155070,45},{155075,48},{217888,62713},{217889,80542},{214139,132},{181300,122},{215126,37692},{181302,124},{181304,120},{180214,38},{142183,16},{316104,56},{172943,51},{172945,52},{180222,36},{180221,37},{181312,30},{316354,2901},{316116,2610},{316359,66675},{166498,2033},{316117,2706},{338006,9996},{338007,8009},{166496,2599},{207635,180},{142186,27},{172934,50},{215127,42034},{155398,47},{176095,17944},{159755,50},{176098,15949},{179483,2749},{155399,46},{179482,2674},{179481,144},{155038,26},{170302,154},{215138,674},{156496,23},{295107,3051},{295108,78561},{295106,2976},{209705,34},{209704,35},{310900,74599},{310901,72618},{341502,148},{341501,142},{155396,49},{181184,50},{181183,49},{181185,45},{210702,55},{218201,30},{207431,74},{127411,55},{199837,814},{208517,33},{135066,72},{205370,58},{255505,44},{255506,43},{371610,15},{158059,8},{158060,9},{371609,14},{158064,42},{158062,15},{158063,16},{170297,136},{180299,42},{217147,54821},{371510,59},{217148,52832},{217146,30887},{201916,40},{128314,6},{218593,440},{208797,1850},{180293,78},{208796,62527},{180295,24},{180294,2415},{171335,91983},{170246,736},{171333,94041},{170248,805},{128305,26},{159102,43},{171331,68656},{159103,42},{201924,30},{216066,42},{201921,68},{207115,42},{216060,104},{207116,41},{207117,40},{207118,37},{171329,24788},{371509,58},{171327,26821},{181124,100},{217049,424},{181125,102},{207120,35},{201932,42},{201934,41},{180270,36},{296265,35373},{180273,8},{296266,33324},{207119,36},{170269,34},{170267,35},{128406,345},{171232,51},{171231,50},{219119,32},{181135,40},{159107,43},{219118,23},{180287,27},{218149,112},{219117,24},{181136,39},{296276,54},{180286,26},{180285,28},{171226,54},{171224,56},{171229,53},{171228,52},{171222,55},{157911,48},{201715,30},{132852,408},{157910,49},{219123,22},{132851,24},{219121,36},{219120,31},{218151,116},{201713,28},{218150,114},{209448,48},{209447,47},{209449,46},{175219,39},{139014,60},{211999,22876},{328931,20},{328932,21},{133712,17},{293500,10},{210681,33},{129676,30},{293501,11},{130206,22},{208488,72},{209456,34},{208006,45},{218160,87},{208008,4714},{159091,36},{141573,19},{141574,18},{141577,20},{159098,40},{159097,41},{129661,47},{129662,46},{129663,45},{155512,35},{292663,47},{208010,1237},{155514,288},{208011,1332},{217088,1692},{292666,88},{208495,40},{208012,1306},{292665,90},{208496,39},{217086,1779},{217087,3640},{208014,2186},{217084,132},{208015,2299},{217085,388},{210685,28854},{203809,32},{209352,874},{208020,66},{203807,30},{203808,33},{209353,943},{203803,368},{203804,373},{209359,41},{333132,35},{333131,40},{333133,34},{333130,39},{214813,34},{128315,7},{213724,86485},{152004,6},{129408,61},{213722,98157},{175221,38},{209361,41614},{128398,44},{209362,39653},{156906,19},{214827,43927},{182080,46},{171297,2487},{219056,68},{207078,51},{182086,118},{207079,52},{182083,43},{182084,44},{182089,130},{201884,46},{182087,126},{182088,128},{182092,134},{182093,136},{210239,11983},{141539,12},{141538,15},{371497,9},{207082,70},{182179,108},{371498,10},{201894,42},{201897,44},{364834,53},{364835,54},{140452,24},{141542,52},{182181,110},{140453,25},{141541,51},{199840,786},{141545,11},{141548,14},{141547,12},{141549,16},{159089,28},{129333,13},{204819,44},{132847,21},{132846,56},{154615,34},{127398,50},{154617,33},{298179,54},{298178,53},{219071,53},{215707,83},{140467,39},{215705,2824},{211226,138},{133541,29},{214508,72},{214507,33},{219097,13970},{210158,55},{215861,32},{212230,47},{215860,30},{215863,24},{215862,25},{192616,44},{204850,70637},{192612,43},{310899,76580},{215859,462},{213675,1541},{214523,28},{129374,51},{129375,52},{132243,529},{210186,36},{318038,37},{318037,38},{318036,26},{318035,25},{202685,40},{203774,47},{203770,667},{215869,36},{215868,21},{134793,2048},{215865,34},{215867,60},{155419,14},{203775,48},{205963,49},{205962,48},{126922,41},{176108,82523},{126921,18},{176103,56810},{176105,84504},{212124,32},{212125,31},{176101,58799},{212022,96099},{216983,48},{155523,8},{155522,7},{213470,29},{155525,18},{205724,844},{205723,168},{203793,160},{203792,130},{213104,20832},{291139,51601},{216993,66},{216994,69},{216991,60},{216992,63},{291131,37422},{205985,20},{211059,87},{211058,87},{154591,38},{154592,37},{203328,2317},{134989,12},{203324,2221},{205745,3440},{205987,218},{291140,49584},{203333,3363},{204301,418},{204785,23},{203331,3286},{134990,13},{322964,64},{322963,66},{216997,43},
//};
//        int[][] KO = {{211085,87},{211084,87},{214114,28},{316146,45},{204547,43},{316147,46},{183881,21},{204303,45},{204795,19},{216768,30},{381910,216},{216767,49},{214123,32},{218601,54},{156497,21},{214122,31},{156499,22},{160515,46},{214124,33},{381909,144},{180269,38},{296458,146},{296456,140},{296457,148},{296455,142},{204798,32},{172977,38},{172978,37},{172971,106},{180474,62},{218611,26},{180476,60},{218610,25},{181326,194},{180478,31},{181328,206},{375254,4035},{316360,64694},{296588,31},{296587,32},{205779,598},{316118,92},{218607,4575},{218606,4411},{218604,28},{179036,33},{218603,27},{179034,34},{215478,41},{375246,52},{183879,22},{375245,50},{135114,57},{180480,24},{180482,23},{126933,17},{204581,29},{375253,6022},{204580,27},{155071,44},{155070,45},{155075,48},{217888,62713},{217889,80542},{214139,132},{181300,122},{215126,37692},{181302,124},{181304,120},{180214,38},{142183,16},{316104,56},{172943,51},{172945,52},{180222,36},{180221,37},{181312,30},{316354,2901},{316116,2610},{316359,66675},{166498,2033},{316117,2706},{338006,9996},{338007,8009},{166496,2599},{207635,180},{142186,27},{172934,50},{215127,42034},{155398,47},{176095,17944},{159755,50},{176098,15949},{179483,2749},{155399,46},{179482,2674},{179481,144},{155038,26},{170302,154},{215138,674},{156496,23},{295107,3051},{295108,78561},{295106,2976},{209705,34},{209704,35},{310900,74599},{310901,72618},{341502,148},{341501,142},{155396,49},{181184,50},{181183,49},{181185,45},{210702,55},{218201,30},{207431,74},{127411,55},{199837,814},{208517,33},{135066,72},{205370,58},{255505,44},{255506,43},{371610,15},{158059,8},{158060,9},{371609,14},{158064,42},{158062,15},{158063,16},{170297,136},{180299,42},{217147,54821},{371510,59},{217148,52832},{217146,30887},{201916,40},{128314,6},{218593,440},{208797,1850},{180293,78},{208796,62527},{180295,24},{180294,2415},{171335,91983},{170246,736},{171333,94041},{170248,805},{128305,26},{159102,43},{171331,68656},{159103,42},{201924,30},{216066,42},{201921,68},{207115,42},{216060,104},{207116,41},{207117,40},{207118,37},{171329,24788},{371509,58},{171327,26821},{181124,100},{217049,424},{181125,102},{207120,35},{201932,42},{201934,41},{180270,36},{296265,35373},{180273,8},{296266,33324},{207119,36},{170269,34},{170267,35},{128406,345},{171232,51},{171231,50},{219119,32},{181135,40},{159107,43},{219118,23},{180287,27},{218149,112},{219117,24},{181136,39},{296276,54},{180286,26},{180285,28},{171226,54},{171224,56},{171229,53},{171228,52},{171222,55},{157911,48},{201715,30},{132852,408},{157910,49},{219123,22},{132851,24},{219121,36},{219120,31},{218151,116},{201713,28},{218150,114},{209448,48},{209447,47},{209449,46},{175219,39},{139014,60},{211999,22876},{328931,20},{328932,21},{133712,17},{293500,10},{210681,33},{129676,30},{293501,11},{130206,22},{208488,72},{209456,34},{208006,45},{218160,87},{208008,4714},{159091,36},{141573,19},{141574,18},{141577,20},{159098,40},{159097,41},{129661,47},{129662,46},{129663,45},{155512,35},{292663,47},{208010,1237},{155514,288},{208011,1332},{217088,1692},{292666,88},{208495,40},{208012,1306},{292665,90},{208496,39},{217086,1779},{217087,3640},{208014,2186},{217084,132},{208015,2299},{217085,388},{210685,28854},{203809,32},{209352,874},{208020,66},{203807,30},{203808,33},{209353,943},{203803,368},{203804,373},{209359,41},{333132,35},{333131,40},{333133,34},{333130,39},{214813,34},{128315,7},{213724,86485},{152004,6},{129408,61},{213722,98157},{175221,38},{209361,41614},{128398,44},{209362,39653},{156906,19},{214827,43927},{182080,46},{171297,2487},{219056,68},{207078,51},{182086,118},{207079,52},{182083,43},{182084,44},{182089,130},{201884,46},{182087,126},{182088,128},{182092,134},{182093,136},{210239,11983},{141539,12},{141538,15},{371497,9},{207082,70},{182179,108},{371498,10},{201894,42},{201897,44},{364834,53},{364835,54},{140452,24},{141542,52},{182181,110},{140453,25},{141541,51},{199840,786},{141545,11},{141548,14},{141547,12},{141549,16},{159089,28},{129333,13},{204819,44},{132847,21},{132846,56},{154615,34},{127398,50},{154617,33},{298179,54},{298178,53},{219071,53},{215707,83},{140467,39},{215705,2824},{211226,138},{133541,29},{214508,72},{214507,33},{219097,13970},{210158,55},{215861,32},{212230,47},{215860,30},{215863,24},{215862,25},{192616,44},{204850,70637},{192612,43},{310899,76580},{215859,462},{213675,1541},{214523,28},{129374,51},{129375,52},{132243,529},{210186,36},{318038,37},{318037,38},{318036,26},{318035,25},{202685,40},{203774,47},{203770,667},{215869,36},{215868,21},{134793,2048},{215865,34},{215867,60},{155419,14},{203775,48},{205963,49},{205962,48},{126922,41},{176108,82523},{126921,18},{176103,56810},{176105,84504},{212124,32},{212125,31},{176101,58799},{212022,96099},{216983,48},{155523,8},{155522,7},{213470,29},{155525,18},{205724,844},{205723,168},{203793,160},{203792,130},{213104,20832},{291139,51601},{216993,66},{216994,69},{216991,60},{216992,63},{291131,37422},{205985,20},{211059,87},{211058,87},{154591,38},{154592,37},{203328,2317},{134989,12},{203324,2221},{205745,3440},{205987,218},{291140,49584},{203333,3363},{204301,418},{204785,23},{203331,3286},{134990,13},{322964,64},{322963,66},{216997,43},
//};
        
//        N = H.length;
//        M = K.length;
        
        int[] roadP = new int[N];
        int[] roadQ = new int[M];
        
        double[] weightSignP = new double[N];
        double[] weightSignQ = new double[M];
        
        double[] orderP = new double[N];
        double[] orderQ = new double[M];
        
        for(int i = 0; i < N; i++){
            roadP[i] = H[i][0];
            weightSignP[i] = (double) H[i][1];
//            orderP[i] = HO[i][1];
        }
        
        for(int i = 0; i < M; i++){
            roadQ[i] = K[i][0];
            weightSignQ[i] = (double) K[i][1];
//            orderQ[i] = KO[i][1];
        }
        
        //compute the average order
        for(int i = 0; i < N; i++)
            //orderP[i] = orderP[i]/weightSignP[i];
            orderP[i] = HO[i]/weightSignP[i];
        
        for(int i = 0; i < M; i++)
            //orderQ[i] = orderQ[i]/weightSignQ[i];
            orderQ[i] = KO[i]/weightSignQ[i];
        
        Signature P = new Signature();
        Signature Q = new Signature();
        
        P.setNumberOfFeatures(N);
        Q.setNumberOfFeatures(M);
        
        Feature2D[] featureP = new Feature2D[N];
        Feature2D[] featureQ = new Feature2D[M];
        
        for(int i = 0; i < N; i++){
            Feature2D f = new Feature2D(roadlist.get(roadP[i]).latitude,roadlist.get(roadP[i]).longitude);
            //Feature2D f = new Feature2D(roadP[i],0);
            f.setOrder(orderP[i]);
            f.setOrderTag(tag);
            f.setWeight(weight);
            featureP[i] = f;
        }
        
        for(int i = 0; i < M; i++){
            Feature2D f = new Feature2D(roadlist.get(roadQ[i]).latitude,roadlist.get(roadQ[i]).longitude);
            //Feature2D f = new Feature2D(roadQ[i],0);
            f.setOrder(orderQ[i]);
            f.setOrderTag(tag);
            f.setWeight(weight);
            featureQ[i] = f;
        }
        
        P.setFeatures(featureP);
        Q.setFeatures(featureQ);
        

        
        double Psum = 0;
        double Qsum = 0;
        
        for(int i = 0; i < N; i++)
            Psum = Psum + weightSignP[i];
        
        for(int i = 0; i < M; i++)
            Qsum = Qsum + weightSignQ[i];
        
        for(int i = 0; i < N; i++)
            weightSignP[i] = weightSignP[i]/Psum;
        
        for(int i = 0; i < M; i++)
            weightSignQ[i] = weightSignQ[i]/Qsum;
        
        P.setWeights(weightSignP);
        Q.setWeights(weightSignQ);
        startTime = System.currentTimeMillis();
        
        double EMD = JFastEMD.distance(P, Q, -1);
        //calculate the EMD
        System.out.println("test 1: " + JFastEMD.distance(P, Q, -1) + " [expected: unknown]");
        //outputWriter1.append(index1 + "," + index2 + "\n");
        outputWriter1.append(EMD + "\n");
        endTime = System.currentTimeMillis();
        totalTime = endTime - startTime;
        System.out.println("Time For EMD = " + totalTime + " ms");
        //outputWriter2.append(index1 + "," + index2 + "\n");
        outputWriter2.append(totalTime + "\n");
        
        //*******************************
       }
        outputWriter1.append("**********************\n");
        System.out.print("**********************\n");
        }
        outputWriter1.flush();
        outputWriter1.close();
        outputWriter2.flush();
        outputWriter2.close();
    }
    
}

